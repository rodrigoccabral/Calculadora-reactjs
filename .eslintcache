[{"C:\\Users\\Therodrigoc\\Desktop\\calculadora\\calculadora-react\\src\\index.js":"1","C:\\Users\\Therodrigoc\\Desktop\\calculadora\\calculadora-react\\src\\reportWebVitals.js":"2","C:\\Users\\Therodrigoc\\Desktop\\calculadora\\calculadora-react\\src\\App.js":"3","C:\\Users\\Therodrigoc\\Desktop\\calculadora\\calculadora-react\\src\\main\\Calculator.jsx":"4","C:\\Users\\Therodrigoc\\Desktop\\calculadora\\calculadora-react\\src\\components\\Button.jsx":"5","C:\\Users\\Therodrigoc\\Desktop\\calculadora\\calculadora-react\\src\\main\\Display.jsx":"6"},{"size":525,"mtime":1606783824135,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":528,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":4601,"mtime":1606962698722,"results":"11","hashOfConfig":"8"},{"size":474,"mtime":1608166446483,"results":"12","hashOfConfig":"8"},{"size":130,"mtime":1606785981504,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1lyh7um",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"C:\\Users\\Therodrigoc\\Desktop\\calculadora\\calculadora-react\\src\\index.js",[],["30","31"],"C:\\Users\\Therodrigoc\\Desktop\\calculadora\\calculadora-react\\src\\reportWebVitals.js",[],"C:\\Users\\Therodrigoc\\Desktop\\calculadora\\calculadora-react\\src\\App.js",[],"C:\\Users\\Therodrigoc\\Desktop\\calculadora\\calculadora-react\\src\\main\\Calculator.jsx",["32","33"],"import React, { Component } from 'react';\r\nimport './Calculator.css';\r\nimport Button from '../components/Button';\r\nimport Display from './Display';\r\n\r\n    const initialState = {\r\n        displayValue: '0',\r\n        clearDisplay: false,\r\n        operation: null,\r\n        values: [0, 0],\r\n        current: 0\r\n    }\r\n\r\nexport default class Calculator extends Component {\r\n\r\n    state = { ...initialState }  //Criamos um clone do objeto initialState no state\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.clearMemory = this.clearMemory.bind(this)\r\n        this.setOperation = this.setOperation.bind(this)\r\n        this.addDigit = this.addDigit.bind(this)\r\n    }\r\n\r\n    clearMemory() {\r\n        this.setState({ ...initialState })\r\n    }\r\n\r\n    setOperation(operation) {\r\n        if(this.state.current === 0) {\r\n            this.setState({ operation, current: 1, clearDisplay: true, displayValue: operation == '=' ? this.state.displayValue : operation })    //O clearDisplay marcado                                                            \r\n        } else {                                                            //como true serve para indicar que um novo numero esta sendo inserido apos clicarmos no botao de operacao                                      \r\n            const equals = operation === '='\r\n            const currentOperation = this.state.operation\r\n\r\n            const values = [...this.state.values]\r\n            try {\r\n                values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)   //O resultado da operação é passado para o primeiro indice do array values\r\n            } catch(e) {\r\n                values[0] = this.state.values[0]    \r\n            }\r\n\r\n            values[1] = 0   //O segundo indice do array values é zerado\r\n\r\n            this.setState({\r\n                displayValue: equals ? values[0] : operation,\r\n                operation: equals ? null : operation,\r\n                current: equals ? 0 : 1,\r\n                clearDisplay: !equals,\r\n                values\r\n            })\r\n        }\r\n    }\r\n\r\n    addDigit(n) {\r\n    if(this.state.displayValue.length < 10) {\r\n        if(n === '.' && this.state.displayValue.toString().includes('.')) { //Regra para impedir que o display \r\n                                                                //apresente mais de um ponto\r\n            return; //Se o valor digitado (n) for ponto e o display ja apresentar um ponto, de um return\r\n        }           //e saia da função\r\n\r\n        const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay\r\n        const currentValue = clearDisplay ? '' : this.state.displayValue\r\n        const displayValue = currentValue + n\r\n        this.setState({ displayValue, clearDisplay: false })\r\n\r\n        if(n !== '.') {\r\n            const i = this.state.current    //Current indica o indice do array o qual o numero esta sendo adicionado\r\n            const newValue = parseFloat(displayValue)   //Passando o novo valor concatenado no display\r\n            const values = [...this.state.values]   //Clonando o array values\r\n            values[i] = newValue        //Passando o novo valor para o indice atual do array values\r\n            this.setState({ values })\r\n            console.log(values)\r\n        }\r\n    } else {\r\n        return\r\n    }\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"calculator\">\r\n                <Display value={this.state.displayValue} />\r\n                <Button label=\"AC\" click={this.clearMemory} triple/>\r\n                <Button label=\"/\" click={this.setOperation} operation/>\r\n                <Button label=\"7\" click={this.addDigit}/>\r\n                <Button label=\"8\" click={this.addDigit}/>\r\n                <Button label=\"9\" click={this.addDigit}/>\r\n                <Button label=\"*\" click={this.setOperation} operation/>\r\n                <Button label=\"4\" click={this.addDigit}/>\r\n                <Button label=\"5\" click={this.addDigit}/>\r\n                <Button label=\"6\" click={this.addDigit}/>\r\n                <Button label=\"-\" click={this.setOperation} operation/>\r\n                <Button label=\"1\" click={this.addDigit}/>\r\n                <Button label=\"2\" click={this.addDigit}/>\r\n                <Button label=\"3\" click={this.addDigit}/>\r\n                <Button label=\"+\" click={this.setOperation} operation/>\r\n                <Button label=\"0\" click={this.addDigit} double/>\r\n                <Button label=\".\" click={this.addDigit}/>\r\n                <Button label=\"=\" click={this.setOperation} operation/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Therodrigoc\\Desktop\\calculadora\\calculadora-react\\src\\components\\Button.jsx",["34"],"import React from 'react';\r\nimport './Button.css';\r\n\r\nexport default props => \r\n    <button \r\n    onClick={e => props.click(props.label)} //Ao clicar no botão chame a função com o valor do label   \r\n                                            //como parametro\r\n    className={`\r\n        button\r\n        ${props.operation ? 'operation' : ''}\r\n        ${props.double ? 'double' : ''}\r\n        ${props.triple ? 'triple' : ''}\r\n    `}>\r\n        { props.label }\r\n    </button>","C:\\Users\\Therodrigoc\\Desktop\\calculadora\\calculadora-react\\src\\main\\Display.jsx",["35"],"import React from 'react';\r\nimport './Display.css';\r\n\r\nexport default props =>\r\n    <div className=\"display\">{ props.value }</div>",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":32,"column":96,"nodeType":"42","messageId":"43","endLine":32,"endColumn":98},{"ruleId":"44","severity":1,"message":"45","line":39,"column":29,"nodeType":"46","messageId":"43","endLine":39,"endColumn":33},{"ruleId":"47","severity":1,"message":"48","line":4,"column":1,"nodeType":"49","endLine":15,"endColumn":14},{"ruleId":"47","severity":1,"message":"48","line":4,"column":1,"nodeType":"49","endLine":5,"endColumn":51},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-eval","eval can be harmful.","CallExpression","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]